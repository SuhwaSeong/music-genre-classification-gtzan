import streamlit as st
import librosa
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import os
import base64
import random
from io import BytesIO
import tensorflow as tf

# --- ыЛдъ╡ньЦ┤ ыФХьЕФыДИыжм (Languages dictionary) ---
lang_dict = {
    "ko": {
        "language_name": "Korean (эХЬъ╡ньЦ┤)",
        "title": "ЁЯО╡ ьЭМьХЕ ьЮеые┤ ы╢ДыеШъ╕░ (CNN ьзАьЫР эПмэХи)",
        "upload": ".wav эММьЭ╝ьЭД ьЧЕыбЬыУЬэХШьД╕ьЪФ",
        "select_model": "ыкиыН╕ ьДаэГЭ",
        "test_file": "ЁЯОз эЕМьКдэК╕ эММьЭ╝:",
        "download": "тмЗя╕П эЕМьКдэК╕ьЪй .wav эММьЭ╝ ыЛдьЪ┤ыбЬыУЬ",
        "prediction": "ЁЯО╢ ьШИь╕быРЬ ьЮеые┤:",
        "prob": "### ЁЯФН ьШИь╕б эЩХыеа",
        "mfcc": "MFCC эЮИэК╕ыз╡ ы│┤ъ╕░",
        "mel": "Mel ьКдэОЩэК╕ыбЬъ╖╕ыЮи ы│┤ъ╕░",
        "mfcc_title": "MFCC эК╣ьзХ",
        "mel_title": "Mel ьКдэОЩэК╕ыбЬъ╖╕ыЮи",
        "error": "тЭМ ьШИь╕б ьдС ьШдыеШ ы░ЬьГЭ",
        "upload_prompt": ".wav эММьЭ╝ьЭД ьЧЕыбЬыУЬэХШьЧм ьЛЬьЮСэХШьД╕ьЪФ.",
        "no_file": "эЕМьКдэК╕ьЪй .wav эММьЭ╝ьЭ┤ ьЧЖьК╡ыЛИыЛд.",
        "change_test": "ЁЯФД эЕМьКдэК╕ эММьЭ╝ ы│Аъ▓╜"
    },
    "en": {
        "language_name": "English (ьШБьЦ┤)",
        "title": "ЁЯО╡ Music Genre Classifier (with CNN support)",
        "upload": "Upload a .wav file",
        "select_model": "Select a model",
        "test_file": "ЁЯОз Test file:",
        "download": "тмЗя╕П Download test .wav file",
        "prediction": "ЁЯО╢ Predicted Genre:",
        "prob": "### ЁЯФН Prediction Probabilities",
        "mfcc": "Show MFCC Heatmap",
        "mel": "Show Mel Spectrogram",
        "mfcc_title": "MFCC Features",
        "mel_title": "Mel Spectrogram",
        "error": "тЭМ Error during prediction",
        "upload_prompt": "Please upload a .wav file to get started.",
        "no_file": "No test .wav file found.",
        "change_test": "ЁЯФД Change test file"
    },
    "de": {
        "language_name": "Deutsch (German-ыПЕьЭ╝ьЦ┤)",
        "title": "ЁЯО╡ Musikgenre-Klassifizierer (mit CNN-Unterst├╝tzung)",
        "upload": "Lade eine .wav-Datei hoch",
        "select_model": "Modell ausw├дhlen",
        "test_file": "ЁЯОз Testdatei:",
        "download": "тмЗя╕П Test-.wav-Datei herunterladen",
        "prediction": "ЁЯО╢ Vorhergesagtes Genre:",
        "prob": "### ЁЯФН Vorhersagewahrscheinlichkeiten",
        "mfcc": "MFCC-Heatmap anzeigen",
        "mel": "Mel-Spektrogramm anzeigen",
        "mfcc_title": "MFCC-Merkmale",
        "mel_title": "Mel-Spektrogramm",
        "error": "тЭМ Fehler bei der Vorhersage",
        "upload_prompt": "Bitte lade eine .wav-Datei hoch, um zu starten.",
        "no_file": "Keine Test-.wav-Datei gefunden.",
        "change_test": "ЁЯФД Testdatei wechseln"
    },
    "pl": {
        "language_name": "Polski (Polish-эП┤ыЮАыУЬьЦ┤)",
        "title": "ЁЯО╡ Klasyfikator gatunk├│w muzycznych (z obs┼Вug─Е CNN)",
        "upload": "Prze┼Ыlij plik .wav",
        "select_model": "Wybierz model",
        "test_file": "ЁЯОз Plik testowy:",
        "download": "тмЗя╕П Pobierz plik .wav do test├│w",
        "prediction": "ЁЯО╢ Przewidywany gatunek:",
        "prob": "### ЁЯФН Prawdopodobie┼Дstwa przewidywania",
        "mfcc": "Poka┼╝ map─Щ ciepln─Е MFCC",
        "mel": "Poka┼╝ spektrogram Mel",
        "mfcc_title": "Cechy MFCC",
        "mel_title": "Spektrogram Mel",
        "error": "тЭМ B┼В─Еd podczas przewidywania",
        "upload_prompt": "Prze┼Ыlij plik .wav, aby rozpocz─Е─З.",
        "no_file": "Nie znaleziono pliku .wav do test├│w.",
        "change_test": "ЁЯФД Zmie┼Д plik testowy"
    },
    "hi": {
        "language_name": "рд╣рд┐рдиреНрджреА (Hindi-ьЭ╕ыПД-эЮМыФФьЦ┤)",        
        "title": "ЁЯО╡ рдореНрдпреВрдЬрд┐рдХ рд╢реИрд▓реА рд╡рд░реНрдЧреАрдХрд░рдг (CNN рд╕рдорд░реНрдерди рд╕рд╣рд┐рдд)",
        "upload": ".wav рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "select_model": "рдореЙрдбрд▓ рдЪреБрдиреЗрдВ",
        "test_file": "ЁЯОз рдкрд░реАрдХреНрд╖рдг рдлрд╝рд╛рдЗрд▓:",
        "download": "тмЗя╕П рдкрд░реАрдХреНрд╖рдг .wav рдлрд╝рд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "prediction": "ЁЯО╢ рдЕрдиреБрдорд╛рдирд┐рдд рд╢реИрд▓реА:",
        "prob": "### ЁЯФН рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХреА рд╕рдВрднрд╛рд╡рдирд╛рдПрдБ",
        "mfcc": "MFCC рд╣реАрдЯрдореИрдк рджрд┐рдЦрд╛рдПрдБ",
        "mel": "Mel рд╕реНрдкреЗрдХреНрдЯреНрд░реЛрдЧреНрд░рд╛рдо рджрд┐рдЦрд╛рдПрдБ",
        "mfcc_title": "MFCC рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ",
        "mel_title": "Mel рд╕реНрдкреЗрдХреНрдЯреНрд░реЛрдЧреНрд░рд╛рдо",
        "error": "тЭМ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдХреЗ рджреМрд░рд╛рди рддреНрд░реБрдЯрд┐",
        "upload_prompt": "рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ .wav рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
        "no_file": "рдХреЛрдИ рдкрд░реАрдХреНрд╖рдг .wav рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реАред",
        "change_test": "ЁЯФД рдкрд░реАрдХреНрд╖рдг рдлрд╝рд╛рдЗрд▓ рдмрджрд▓реЗрдВ"
    },
    "ta": {
        "language_name": "родрооро┐ро┤рпН (Tamil-ьЭ╕ыПД-эГАызРьЦ┤)",
        "title": "ЁЯО╡ роЗроЪрпИ ро╡роХрпИ ро╡роХрпИрокрпНрокроЯрпБродрпНродро┐ (CNN роЖродро░ро╡рпБроЯройрпН)",
        "upload": ".wav роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒рпБ",
        "select_model": "рооро╛родро┐ро░ро┐ропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБ",
        "test_file": "ЁЯОз роЪрпЛродройрпИ роХрпЛрокрпНрокрпБ:",
        "download": "тмЗя╕П роЪрпЛродройрпИ .wav роХрпЛрокрпНрокрпИ рокродро┐ро╡ро┐ро▒роХрпНроХрпБ",
        "prediction": "ЁЯО╢ роХрогро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗроЪрпИ ро╡роХрпИ:",
        "prob": "### ЁЯФН роХрогро┐рокрпНрокрпБ роЪро╛родрпНродро┐ропроХрпНроХрпВро▒рпБроХро│рпН",
        "mfcc": "MFCC ро╡рпЖрокрпНрокрокрпНрокроЯродрпНродрпИ роХро╛роЯрпНроЯрпБ",
        "mel": "Mel ро╕рпНрокрпЖроХрпНроЯрпНро░рпЛроХро┐ро░ро╛роорпИ роХро╛роЯрпНроЯрпБ",
        "mfcc_title": "MFCC роЕроорпНроЪроЩрпНроХро│рпН",
        "mel_title": "Mel ро╕рпНрокрпЖроХрпНроЯрпНро░рпЛроХроорпН",
        "error": "тЭМ роХрогро┐рокрпНрокро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ",
        "upload_prompt": "родрпКроЯроЩрпНроХ .wav роХрпЛрокрпНрокрпИ рокродро┐ро╡рпЗро▒рпНро▒рпБ.",
        "no_file": ".wav роЪрпЛродройрпИ роХрпЛрокрпНрокрпБ роЗро▓рпНро▓рпИ.",
        "change_test": "ЁЯФД роЪрпЛродройрпИ роХрпЛрокрпНрокрпИ рооро╛ро▒рпНро▒рпБ"
    },
    "zh": {
        "language_name": "ф╕нцЦЗ (China-ьдСъ╡ньЦ┤)",
        "title": "ЁЯО╡ щЯ│ф╣Рц╡Бц┤╛хИЖч▒╗хЩия╝ИцФпцМБCNNя╝Й",
        "upload": "ф╕Кф╝а .wav цЦЗф╗╢",
        "select_model": "щАЙцЛйцибхЮЛ",
        "test_file": "ЁЯОз ц╡ЛшпХцЦЗф╗╢:",
        "download": "тмЗя╕П ф╕Лш╜╜ц╡ЛшпХ .wav цЦЗф╗╢",
        "prediction": "ЁЯО╢ щвДц╡ЛчЪДц╡Бц┤╛:",
        "prob": "### ЁЯФН щвДц╡ЛцжВчОЗ",
        "mfcc": "цШ╛чд║ MFCC чГнхЫ╛",
        "mel": "цШ╛чд║ Mel щвСш░▒хЫ╛",
        "mfcc_title": "MFCC чЙ╣х╛Б",
        "mel_title": "Mel щвСш░▒хЫ╛",
        "error": "тЭМ щвДц╡ЛцЧ╢хПСчФЯщФЩшпп",
        "upload_prompt": "шп╖ф╕Кф╝а .wav цЦЗф╗╢ф╗ех╝АхзЛуАВ",
        "no_file": "цЬкцЙ╛хИ░ц╡ЛшпХ .wav цЦЗф╗╢уАВ",
        "change_test": "ЁЯФД цЫ┤цНвц╡ЛшпХцЦЗф╗╢"
    },
    "yue": {
        "language_name": "ч▓╡шкЮ (Cantonese-эЩНь╜йьЦ┤)",
        "title": "ЁЯО╡ щЯ│циВщбЮхЮЛхИЖщбЮхЩия╝ИцФпцП┤CNNя╝Й",
        "upload": "ф╕КхВ│ .wav цкФцбИ",
        "select_model": "щБ╕цУЗцибхЮЛ",
        "test_file": "ЁЯОз ц╕мшйжцкФцбИя╝Ъ",
        "download": "тмЗя╕П ф╕Лш╝Йц╕мшйж .wav цкФцбИ",
        "prediction": "ЁЯО╢ щаРц╕мчЪДщбЮхЮЛя╝Ъ",
        "prob": "### ЁЯФН щаРц╕мцйЯчОЗ",
        "mfcc": "щбпчд║ MFCC чЖ▒хЬЦ",
        "mel": "щбпчд║ Mel ща╗шнЬхЬЦ",
        "mfcc_title": "MFCC чЙ╣х╛╡",
        "mel_title": "Mel ща╗шнЬхЬЦ",
        "error": "тЭМ щаРц╕мцЩВчЩ╝чФЯщМпшкд",
        "upload_prompt": "шлЛф╕КхВ│ .wav цкФцбИф╗ещЦЛхзЛуАВ",
        "no_file": "цЬкцЙ╛хИ░ц╕мшйжчФичЪД .wav цкФцбИуАВ",
        "change_test": "ЁЯФД цЫ┤цПЫц╕мшйжцкФцбИ"
    },
    "ja": {
        "language_name": "цЧецЬмшкЮ (Japanese-ьЭ╝ы│╕ьЦ┤)",
        "title": "ЁЯО╡ щЯ│це╜уВ╕уГгуГ│уГлхИЖщбЮхЩия╝ИCNNхп╛х┐Ья╝Й",
        "upload": ".wavуГХуВбуВдуГлуВТуВвуГГуГЧуГнуГ╝уГЙ",
        "select_model": "уГвуГЗуГлуВТщБ╕цКЮ",
        "test_file": "ЁЯОз уГЖуВ╣уГИуГХуВбуВдуГля╝Ъ",
        "download": "тмЗя╕П уГЖуВ╣уГИчФи .wav уГХуВбуВдуГлуВТуГАуВжуГ│уГнуГ╝уГЙ",
        "prediction": "ЁЯО╢ ф║Иц╕муБХуВМуБЯуВ╕уГгуГ│уГля╝Ъ",
        "prob": "### ЁЯФН ф║Иц╕мчв║чОЗ",
        "mfcc": "MFCC уГТуГ╝уГИуГЮуГГуГЧуВТшбичд║",
        "mel": "Mel уВ╣уГЪуВпуГИуГнуВ░уГйуГауВТшбичд║",
        "mfcc_title": "MFCC чЙ╣х╛┤",
        "mel_title": "Mel уВ╣уГЪуВпуГИуГнуВ░уГйуГа",
        "error": "тЭМ ф║Иц╕мф╕нуБлуВиуГйуГ╝уБМчЩ║чФЯуБЧуБ╛уБЧуБЯ",
        "upload_prompt": ".wav уГХуВбуВдуГлуВТуВвуГГуГЧуГнуГ╝уГЙуБЧуБжщЦЛхзЛуБЧуБжуБПуБауБХуБДуАВ",
        "no_file": "уГЖуВ╣уГИчФиуБо .wav уГХуВбуВдуГлуБМшжЛуБдуБЛуВКуБ╛уБЫуВУуАВ",
        "change_test": "ЁЯФД уГЖуВ╣уГИуГХуВбуВдуГлуВТхдЙцЫ┤"
    },
    "fr": {
        "language_name": "Fran├зais (Franch-эФДыЮСьКдьЦ┤)",
        "title": "ЁЯО╡ Classificateur de genre musical (avec support CNN)",
        "upload": "T├йl├йversez un fichier .wav",
        "select_model": "Choisissez un mod├иle",
        "test_file": "ЁЯОз Fichier de test :",
        "download": "тмЗя╕П T├йl├йcharger le fichier .wav de test",
        "prediction": "ЁЯО╢ Genre pr├йdit :",
        "prob": "### ЁЯФН Probabilit├йs de pr├йdiction",
        "mfcc": "Afficher la carte thermique MFCC",
        "mel": "Afficher le spectrogramme Mel",
        "mfcc_title": "Caract├йristiques MFCC",
        "mel_title": "Spectrogramme Mel",
        "error": "тЭМ Erreur lors de la pr├йdiction",
        "upload_prompt": "Veuillez t├йl├йverser un fichier .wav pour commencer.",
        "no_file": "Aucun fichier .wav de test trouv├й.",
        "change_test": "ЁЯФД Changer de fichier de test"
    },
    "it": {
        "language_name": "Italiano (Italian-ьЭ┤эГИыжмьХДьЦ┤)",
        "title": "ЁЯО╡ Classificatore di generi musicali (con supporto CNN)",
        "upload": "Carica un file .wav",
        "select_model": "Seleziona un modello",
        "test_file": "ЁЯОз File di test:",
        "download": "тмЗя╕П Scarica file .wav di test",
        "prediction": "ЁЯО╢ Genere previsto:",
        "prob": "### ЁЯФН Probabilit├а di previsione",
        "mfcc": "Mostra la mappa di calore MFCC",
        "mel": "Mostra lo spettrogramma Mel",
        "mfcc_title": "Caratteristiche MFCC",
        "mel_title": "Spettrogramma Mel",
        "error": "тЭМ Errore durante la previsione",
        "upload_prompt": "Carica un file .wav per iniziare.",
        "no_file": "File .wav di test non trovato.",
        "change_test": "ЁЯФД Cambia file di test"
    },
    "ru": {
        "language_name": "╨а╤Г╤Б╤Б╨║╨╕╨╣ (Russian-ыЯмьЛЬьХДьЦ┤)",
        "title": "ЁЯО╡ ╨Ъ╨╗╨░╤Б╤Б╨╕╤Д╨╕╨║╨░╤В╨╛╤А ╨╝╤Г╨╖╤Л╨║╨░╨╗╤М╨╜╤Л╤Е ╨╢╨░╨╜╤А╨╛╨▓ (╤Б ╨┐╨╛╨┤╨┤╨╡╤А╨╢╨║╨╛╨╣ CNN)",
        "upload": "╨Ч╨░╨│╤А╤Г╨╖╨╕╤В╨╡ .wav ╤Д╨░╨╣╨╗",
        "select_model": "╨Т╤Л╨▒╨╡╤А╨╕╤В╨╡ ╨╝╨╛╨┤╨╡╨╗╤М",
        "test_file": "ЁЯОз ╨в╨╡╤Б╤В╨╛╨▓╤Л╨╣ ╤Д╨░╨╣╨╗:",
        "download": "тмЗя╕П ╨б╨║╨░╤З╨░╤В╤М ╤В╨╡╤Б╤В╨╛╨▓╤Л╨╣ .wav ╤Д╨░╨╣╨╗",
        "prediction": "ЁЯО╢ ╨Я╤А╨╡╨┤╤Б╨║╨░╨╖╨░╨╜╨╜╤Л╨╣ ╨╢╨░╨╜╤А:",
        "prob": "### ЁЯФН ╨Т╨╡╤А╨╛╤П╤В╨╜╨╛╤Б╤В╨╕ ╨┐╤А╨╡╨┤╤Б╨║╨░╨╖╨░╨╜╨╕╤П",
        "mfcc": "╨Я╨╛╨║╨░╨╖╨░╤В╤М ╤В╨╡╨┐╨╗╨╛╨▓╤Г╤О ╨║╨░╤А╤В╤Г MFCC",
        "mel": "╨Я╨╛╨║╨░╨╖╨░╤В╤М ╤Б╨┐╨╡╨║╤В╤А╨╛╨│╤А╨░╨╝╨╝╤Г Mel",
        "mfcc_title": "╨Я╤А╨╕╨╖╨╜╨░╨║╨╕ MFCC",
        "mel_title": "╨б╨┐╨╡╨║╤В╤А╨╛╨│╤А╨░╨╝╨╝╨░ Mel",
        "error": "тЭМ ╨Ю╤И╨╕╨▒╨║╨░ ╨┐╤А╨╕ ╨┐╤А╨╡╨┤╤Б╨║╨░╨╖╨░╨╜╨╕╨╕",
        "upload_prompt": "╨Я╨╛╨╢╨░╨╗╤Г╨╣╤Б╤В╨░, ╨╖╨░╨│╤А╤Г╨╖╨╕╤В╨╡ .wav ╤Д╨░╨╣╨╗ ╨┤╨╗╤П ╨╜╨░╤З╨░╨╗╨░.",
        "no_file": "╨в╨╡╤Б╤В╨╛╨▓╤Л╨╣ .wav ╤Д╨░╨╣╨╗ ╨╜╨╡ ╨╜╨░╨╣╨┤╨╡╨╜.",
        "change_test": "ЁЯФД ╨б╨╝╨╡╨╜╨╕╤В╤М ╤В╨╡╤Б╤В╨╛╨▓╤Л╨╣ ╤Д╨░╨╣╨╗"
    },
    "es": {
        "language_name": "Espa├▒ol (Spanish-ьКдэОШьЭ╕ьЦ┤)",
        "title": "ЁЯО╡ Clasificador de g├йneros musicales (con soporte CNN)",
        "upload": "Sube un archivo .wav",
        "select_model": "Selecciona un modelo",
        "test_file": "ЁЯОз Archivo de prueba:",
        "download": "тмЗя╕П Descargar archivo .wav de prueba",
        "prediction": "ЁЯО╢ G├йnero predicho:",
        "prob": "### ЁЯФН Probabilidades de predicci├│n",
        "mfcc": "Mostrar mapa de calor MFCC",
        "mel": "Mostrar espectrograma Mel",
        "mfcc_title": "Caracter├нsticas MFCC",
        "mel_title": "Espectrograma Mel",
        "error": "тЭМ Error durante la predicci├│n",
        "upload_prompt": "Por favor, sube un archivo .wav para empezar.",
        "no_file": "No se encontr├│ archivo .wav de prueba.",
        "change_test": "ЁЯФД Cambiar archivo de prueba"
    },
    "ar": {
        "language_name": "╪з┘Д╪╣╪▒╪и┘К╪й (Arabic-ьХДыЮНьЦ┤)",
        "title": "ЁЯО╡ ┘Е╪╡┘Ж┘Б ┘Ж┘И╪╣ ╪з┘Д┘Е┘И╪│┘К┘В┘Й (╪и╪п╪╣┘Е ┘Е┘Ж CNN)",
        "upload": "┘В┘Е ╪и╪к╪н┘Е┘К┘Д ┘Е┘Д┘Б .wav",
        "select_model": "╪з╪о╪к╪▒ ┘Ж┘Е┘И╪░╪м┘Л╪з",
        "test_file": "ЁЯОз ┘Е┘Д┘Б ╪з┘Д╪з╪о╪к╪и╪з╪▒:",
        "download": "тмЗя╕П ╪к┘Ж╪▓┘К┘Д ┘Е┘Д┘Б .wav ┘Д┘Д╪з╪о╪к╪и╪з╪▒",
        "prediction": "ЁЯО╢ ╪з┘Д┘Ж┘И╪╣ ╪з┘Д┘Е╪к┘И┘В╪╣:",
        "prob": "### ЁЯФН ╪з╪н╪к┘Е╪з┘Д╪з╪к ╪з┘Д╪к┘Ж╪и╪д",
        "mfcc": "╪╣╪▒╪╢ ╪о╪▒┘К╪╖╪й ╪з┘Д╪н╪▒╪з╪▒╪й MFCC",
        "mel": "╪╣╪▒╪╢ ╪╖┘К┘Б Mel",
        "mfcc_title": "┘Е┘К╪▓╪з╪к MFCC",
        "mel_title": "╪╖┘К┘Б Mel",
        "error": "тЭМ ╪о╪╖╪г ╪г╪л┘Ж╪з╪б ╪з┘Д╪к┘Ж╪и╪д",
        "upload_prompt": "┘К╪▒╪м┘Й ╪к╪н┘Е┘К┘Д ┘Е┘Д┘Б .wav ┘Д┘Д╪и╪п╪б.",
        "no_file": "┘Д┘Е ┘К╪к┘Е ╪з┘Д╪╣╪л┘И╪▒ ╪╣┘Д┘Й ┘Е┘Д┘Б .wav ┘Д┘Д╪з╪о╪к╪и╪з╪▒.",
        "change_test": "ЁЯФД ╪к╪║┘К┘К╪▒ ┘Е┘Д┘Б ╪з┘Д╪з╪о╪к╪и╪з╪▒"
    },
    "pt": {
        "language_name": "Portugu├кs (Portuguese-эПмые┤эИмъ░ИьЦ┤)",
        "title": "ЁЯО╡ Classificador de G├кneros Musicais (com suporte CNN)",
        "upload": "Envie um arquivo .wav",
        "select_model": "Escolha um modelo",
        "test_file": "ЁЯОз Arquivo de teste:",
        "download": "тмЗя╕П Baixar arquivo .wav de teste",
        "prediction": "ЁЯО╢ G├кnero previsto:",
        "prob": "### ЁЯФН Probabilidades de previs├гo",
        "mfcc": "Mostrar mapa de calor MFCC",
        "mel": "Mostrar espectrograma Mel",
        "mfcc_title": "Caracter├нsticas MFCC",
        "mel_title": "Espectrograma Mel",
        "error": "тЭМ Erro durante a previs├гo",
        "upload_prompt": "Por favor, envie um arquivo .wav para come├зar.",
        "no_file": "Arquivo .wav de teste n├гo encontrado.",
        "change_test": "ЁЯФД Alterar arquivo de teste"
    },
    "vi": {
        "language_name": "Tiс║┐ng Viс╗Зt (Vietnamese-ы▓аэК╕ыВиьЦ┤)",
        "title": "ЁЯО╡ Bс╗Щ ph├вn loс║бi thс╗Г loс║бi nhс║бc (hс╗Ч trс╗г CNN)",
        "upload": "Tс║гi l├кn tс╗Зp .wav",
        "select_model": "Chс╗Нn m├┤ h├мnh",
        "test_file": "ЁЯОз Tс╗Зp kiс╗Гm tra:",
        "download": "тмЗя╕П Tс║гi xuс╗Сng tс╗Зp .wav kiс╗Гm tra",
        "prediction": "ЁЯО╢ Thс╗Г loс║бi dс╗▒ ─Сo├бn:",
        "prob": "### ЁЯФН X├бc suс║еt dс╗▒ ─Сo├бn",
        "mfcc": "Hiс╗Гn thс╗Л bс║гn ─Сс╗У nhiс╗Зt MFCC",
        "mel": "Hiс╗Гn thс╗Л phс╗Х Mel",
        "mfcc_title": "─Рс║╖c tr╞░ng MFCC",
        "mel_title": "Phс╗Х Mel",
        "error": "тЭМ Lс╗Чi trong qu├б tr├мnh dс╗▒ ─Сo├бn",
        "upload_prompt": "Vui l├▓ng tс║гi l├кn tс╗Зp .wav ─Сс╗Г bс║пt ─Сс║зu.",
        "no_file": "Kh├┤ng t├мm thс║еy tс╗Зp .wav kiс╗Гm tra.",
        "change_test": "ЁЯФД ─Рс╗Хi tс╗Зp kiс╗Гm tra kh├бc"
    },
    "tr": {
        "language_name": "T├╝rk├зe (Turkish-эКАые┤эВдьШИьЦ┤)",
        "title": "ЁЯО╡ M├╝zik T├╝r├╝ S─▒n─▒fland─▒r─▒c─▒ (CNN deste─Яi ile)",
        "upload": ".wav dosyas─▒ y├╝kleyin",
        "select_model": "Bir model se├зin",
        "test_file": "ЁЯОз Test dosyas─▒:",
        "download": "тмЗя╕П Test .wav dosyas─▒n─▒ indir",
        "prediction": "ЁЯО╢ Tahmin Edilen T├╝r:",
        "prob": "### ЁЯФН Tahmin Olas─▒l─▒klar─▒",
        "mfcc": "MFCC Is─▒ Haritas─▒n─▒ G├╢ster",
        "mel": "Mel Spektrogram─▒n─▒ G├╢ster",
        "mfcc_title": "MFCC ├Цzellikleri",
        "mel_title": "Mel Spektrogram─▒",
        "error": "тЭМ Tahmin s─▒ras─▒nda hata olu┼Яtu",
        "upload_prompt": "Ba┼Яlamak i├зin l├╝tfen bir .wav dosyas─▒ y├╝kleyin.",
        "no_file": "Test .wav dosyas─▒ bulunamad─▒.",
        "change_test": "ЁЯФД Test dosyas─▒n─▒ de─Яi┼Яtir"
    },
}

# --- ьЮеые┤ ыаИьЭ┤ы╕Ф (CNNьЪй)
genre_labels = ['blues', 'classical', 'country', 'disco', 'hiphop',
                'jazz', 'metal', 'pop', 'reggae', 'rock']

# --- ьГБэГЬ ь┤Иъ╕░эЩФ ---
if "refresh_sample" not in st.session_state:
    st.session_state.refresh_sample = False

# --- ьЦ╕ьЦ┤ ьДаэГЭ ---
selected_lang = st.sidebar.selectbox("Language / ьЦ╕ьЦ┤", options=list(lang_dict.keys()), format_func=lambda x: lang_dict[x]["language_name"])
texts = lang_dict[selected_lang]

# --- ым┤ьЮСьЬД wav эММьЭ╝ ьДаэГЭ ---
def pick_random_wav_file(base_dir="/content/gtzan_data/Data/genres_original"):
    genres = [g for g in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, g))]
    random_genre = random.choice(genres)
    genre_path = os.path.join(base_dir, random_genre)
    wav_files = [f for f in os.listdir(genre_path) if f.endswith(".wav")]
    if not wav_files:
        return None, None
    random_file = random.choice(wav_files)
    return os.path.join(genre_path, random_file), f"{random_genre} - {random_file}"

# --- ьШдыФФьШд ыЛдьЪ┤ыбЬыУЬ ызБэБм ьГЭьД▒ ---
def get_audio_download_link(file_path, label):
    with open(file_path, "rb") as f:
        data = f.read()
    b64 = base64.b64encode(data).decode()
    return f'<a href="data:audio/wav;base64,{b64}" download="test_sample.wav">{label}</a>'

# --- CNN ыкиыН╕ ыбЬыУЬ ---
@st.cache_resource
def load_cnn_model():
    model = tf.keras.models.load_model(MODEL_FILES["CNN"], compile=False)
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

# --- ъ╕░ьб┤ ыкиыН╕ ыбЬыУЬ ---
def load_model_files(model_name: str):
    model_path = os.path.join(BASE_PATH, MODEL_FILES[model_name])
    scaler_path = os.path.join(BASE_PATH, SCALER_FILE)
    label_enc_path = os.path.join(BASE_PATH, LABEL_ENCODER_FILE)
    report_path = os.path.join(BASE_PATH, REPORT_FILES[model_name])

    for path in [model_path, scaler_path, label_enc_path, report_path]:
        if not os.path.isfile(path):
            st.error(f"Required file not found: {path}")
            st.stop()

    model = joblib.load(model_path)
    scaler = joblib.load(scaler_path)
    label_encoder = joblib.load(label_enc_path)
    report_df = pd.read_csv(report_path, index_col=0)
    with open(report_path, "rb") as f:
        report_data = f.read()

    return model, scaler, label_encoder, report_df, report_data, report_path

# --- эК╣ьзХ ь╢Фь╢Ь эХиьИШыУд ---
def extract_features(audio_bytes, n_mfcc):
    y, sr = librosa.load(BytesIO(audio_bytes), sr=None)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)
    return np.concatenate([np.mean(mfcc, axis=1), np.std(mfcc, axis=1)]).reshape(1, -1), mfcc

def extract_mel_spectrogram(audio_bytes, max_len=128):
    y, sr = librosa.load(BytesIO(audio_bytes), sr=22050)
    mel = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)
    mel_db = librosa.power_to_db(mel, ref=np.max)
    pad_width = max(0, max_len - mel_db.shape[1])
    mel_db = np.pad(mel_db, ((0, 0), (0, pad_width)), mode='constant') if pad_width > 0 else mel_db[:, :max_len]
    return mel_db[np.newaxis, ..., np.newaxis], mel_db

# --- эБ┤ыЮШьКд ыЭ╝ы▓и ьаХыам эЩХьЭ╕ ---
def check_class_alignment(model, label_encoder):
    try:
        return label_encoder.inverse_transform(model.classes_)
    except Exception:
        return label_encoder.classes_

# --- ьГБьИШ ьДдьаХ ---
BASE_PATH = ""
N_MFCC = 13
SAMPLE_AUDIO_FILE = "sample.wav"
MODEL_FILES = {"Random Forest": "rf_model.pkl", "SVM": "svm_model.pkl", "CNN": "cnn_genre_model.keras"}
REPORT_FILES = {"Random Forest": "rf_classification_report.csv", "SVM": "svm_classification_report.csv"}
SCALER_FILE = "scaler.pkl"
LABEL_ENCODER_FILE = "label_encoder.pkl"
genre_labels = ['blues', 'classical', 'country', 'disco', 'hiphop', 'jazz', 'metal', 'pop', 'reggae', 'rock']

# --- Streamlit UI ьЛЬьЮС ---
st.set_page_config(page_title="Music Genre Classifier", layout="centered")
st.title(texts["title"])

model_option = st.selectbox(texts["select_model"], list(MODEL_FILES.keys()))

if st.sidebar.button(texts["change_test"]):
    st.session_state.refresh_sample = not st.session_state.refresh_sample

sample_path, sample_name = pick_random_wav_file()
if sample_path:
    st.sidebar.markdown(f"{texts['test_file']} `{sample_name}`")
    st.sidebar.markdown(get_audio_download_link(sample_path, texts['download']), unsafe_allow_html=True)
else:
    st.sidebar.warning(texts["no_file"])

if model_option == "CNN":
    model = load_cnn_model()
else:
    model, scaler, label_encoder, _, _, _ = load_model_files(model_option)
    model_classes = check_class_alignment(model, label_encoder)

uploaded_file = st.file_uploader(texts["upload"], type=["wav"])

if uploaded_file:
    audio_bytes = uploaded_file.read()
    st.audio(audio_bytes, format="audio/wav")

    if model_option == "CNN":
        features, mel = extract_mel_spectrogram(audio_bytes)
        prediction = model.predict(features)
        predicted_index = np.argmax(prediction)
        predicted_label = genre_labels[predicted_index]

        st.success(f"{texts['prediction']} `{predicted_label.capitalize()}`")
        st.markdown(texts["prob"])
        st.bar_chart(dict(zip(genre_labels, prediction[0])))

        if st.checkbox(texts["mel"]):
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.heatmap(mel, cmap="YlGnBu", ax=ax)
            ax.set(title=texts["mel_title"], xlabel="Time", ylabel="Mel Bands")
            st.pyplot(fig)
            plt.close(fig)

    else:
        try:
            features, mfcc = extract_features(audio_bytes, N_MFCC)
            features_scaled = scaler.transform(features)
            prediction_encoded = model.predict(features_scaled)
            prediction = label_encoder.inverse_transform(prediction_encoded)

            st.success(f"{texts['prediction']} `{prediction[0].capitalize()}`")

            if hasattr(model, "predict_proba"):
                proba = model.predict_proba(features_scaled)[0]
                st.markdown(texts["prob"])
                st.bar_chart(dict(zip(model_classes, proba)))

            if st.checkbox(texts["mfcc"]):
                fig, ax = plt.subplots(figsize=(8, 4))
                sns.heatmap(mfcc, cmap="YlGnBu", ax=ax)
                ax.set(title=texts["mfcc_title"], xlabel="Time", ylabel="MFCC Coefficients")
                st.pyplot(fig)
                plt.close(fig)

        except Exception as e:
            st.error(texts["error"])
            st.exception(e)
else:
    st.info(texts["upload_prompt"])
